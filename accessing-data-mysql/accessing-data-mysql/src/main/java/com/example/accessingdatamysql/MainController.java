package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application Path)
public class MainController
{
	@Autowired // This means to get the bean called userRepository
		//Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private CustomerRepository custRepo;

	@PostMapping(path="/add") //Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email)
	{
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved\n";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers()
	{
		return userRepository.findAll();
	}

	@PostMapping(path="/addCustomer")
	public @ResponseBody String addNewCustomer(@RequestParam String first, @RequestParam String last)
	{
		Customer cust = new Customer(first, last);
		custRepo.save(cust);
		return "Saved\n";
	}

	@GetMapping(path="/allCustomers")
	public @ResponseBody Iterable<Customer> getAllCustomers()
	{
		return custRepo.findAll();
	}

	@GetMapping(path="/CustomerLastName")
	public @ResponseBody Iterable<Customer> getCustomerWithLastName(@RequestParam String last)
	{
		return custRepo.findByLastName(last);
	}

	@GetMapping(path="/GetCustomerById")
	public @ResponseBody Customer getCustomerById(@RequestParam long id)
	{
		return custRepo.findById(id);
	}

}
